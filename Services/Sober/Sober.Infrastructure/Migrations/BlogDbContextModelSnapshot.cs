// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sober.Infrastructure.Persistence;

#nullable disable

namespace Sober.Infrastructure.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sober.Domain.Aggregates.AdditionalSkillAggregate.AdditionalSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdditionalSkill", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.CommentAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.EducationAggregate.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstituteLogo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCurrentStudent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.ExperienceAggregate.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyLogo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrentEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTimeEmployee")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Experiences", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.FeedbackAggregate.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FeedbackId");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GuestIpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.InterestAggregates.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Interests", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostAbstract")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PostImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReadingMinute")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.ProjectAggregates.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.Property<string>("DisplayDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectSrcLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProjectSummary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.PublicationAggregate.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("JournalName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PublicationImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Publications", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.SkillAggregate.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TopicId");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.TagAggregates.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.UserInformationAggregate.UserInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInformation", (string)null);
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.AdditionalSkillAggregate.AdditionalSkill", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sober.Domain.Aggregates.AdditionalSkillAggregate.Entities.AdditionalKey", "Keys", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AdditionalSkillKeyId");

                            b1.Property<Guid>("AdditionalSkillId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Key")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.HasKey("Id", "AdditionalSkillId");

                            b1.HasIndex("AdditionalSkillId");

                            b1.ToTable("AdditionalSkillKey", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AdditionalSkillId");
                        });

                    b.Navigation("Keys");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.CommentAggregate.Comment", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.EducationAggregate.Education", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.SkillAggregate.Topic", null)
                        .WithMany("Educations")
                        .HasForeignKey("TopicId");

                    b.OwnsMany("Sober.Domain.Aggregates.EducationAggregate.Entities.EducationSection", "EducationSection", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("EducationSectionId");

                            b1.Property<Guid>("EducationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("SectionDescription")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.HasKey("Id", "EducationId");

                            b1.HasIndex("EducationId");

                            b1.ToTable("EducationSection", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EducationId");
                        });

                    b.Navigation("EducationSection");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.ExperienceAggregate.Experience", b =>
                {
                    b.OwnsMany("Sober.Domain.Aggregates.ExperienceAggregate.Entities.ExperienceSection", "ExperienceSection", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ExperienceSectionId");

                            b1.Property<Guid>("ExperienceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("SectionDescription")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.HasKey("Id", "ExperienceId");

                            b1.HasIndex("ExperienceId");

                            b1.ToTable("ExperienceSection", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExperienceId");
                        });

                    b.Navigation("ExperienceSection");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.InterestAggregates.Interest", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sober.Domain.Aggregates.InterestAggregates.Entities.InterestKey", "Keys", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("InterestKeyId");

                            b1.Property<Guid>("InterestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.HasKey("Id", "InterestId");

                            b1.HasIndex("InterestId");

                            b1.ToTable("InterestKey", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("InterestId");
                        });

                    b.Navigation("Keys");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sober.Domain.Aggregates.PostAggregate.Entities.PostSection", "Sections", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PostSectionId");

                            b1.Property<Guid>("PostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("SectionDescription")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("SectionImage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SectionTitle")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("Id", "PostId");

                            b1.HasIndex("PostId");

                            b1.ToTable("PostSections", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PostId");

                            b1.OwnsMany("Sober.Domain.Aggregates.PostAggregate.Entities.PostItem", "Items", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("PostItemId");

                                    b2.Property<Guid>("PostSectionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("PostId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("PostItemDescription")
                                        .IsRequired()
                                        .HasMaxLength(1000)
                                        .HasColumnType("nvarchar(1000)");

                                    b2.Property<string>("PostItemImage")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("PostItemTitle")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("Id", "PostSectionId", "PostId");

                                    b2.HasIndex("PostSectionId", "PostId");

                                    b2.ToTable("PostItems", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("PostSectionId", "PostId");
                                });

                            b1.Navigation("Items");
                        });

                    b.OwnsMany("Sober.Domain.Aggregates.PostAggregate.Entities.PostTopic", "TopicIds", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TopicTagId");

                            b1.Property<Guid>("PostId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("TopicTitle")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("Id", "PostId");

                            b1.HasIndex("PostId");

                            b1.ToTable("TopicTags", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("Sections");

                    b.Navigation("TopicIds");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.ProjectAggregates.Project", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sober.Domain.Aggregates.ProjectAggregates.Entities.ProjectSection", "ProjectSection", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ProjectTopicId");

                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("TopicId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id", "ProjectId");

                            b1.HasIndex("ProjectId");

                            b1.HasIndex("TopicId");

                            b1.ToTable("ProjectTopics", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");

                            b1.HasOne("Sober.Domain.Aggregates.SkillAggregate.Topic", "Topic")
                                .WithMany()
                                .HasForeignKey("TopicId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.OwnsMany("Sober.Domain.Aggregates.ProjectAggregates.Entities.ProjectTag", "ProjectTags", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("ProjectTagId");

                                    b2.Property<Guid>("ProjectTopicId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("ProjectId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("TagId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id", "ProjectTopicId", "ProjectId");

                                    b2.HasIndex("TagId");

                                    b2.HasIndex("ProjectTopicId", "ProjectId");

                                    b2.ToTable("ProjectTags", (string)null);

                                    b2.HasOne("Sober.Domain.Aggregates.TagAggregates.Tag", "Tag")
                                        .WithMany()
                                        .HasForeignKey("TagId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectTopicId", "ProjectId");

                                    b2.Navigation("Tag");
                                });

                            b1.Navigation("ProjectTags");

                            b1.Navigation("Topic");
                        });

                    b.Navigation("ProjectSection");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.PublicationAggregate.Publication", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sober.Domain.Aggregates.PublicationAggregate.Entities.PublicationKey", "Keys", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PublicationKeyId");

                            b1.Property<Guid>("PublicationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("Id", "PublicationId");

                            b1.HasIndex("PublicationId");

                            b1.ToTable("PublicationKey", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PublicationId");
                        });

                    b.Navigation("Keys");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.UserInformationAggregate.UserInformation", b =>
                {
                    b.HasOne("Sober.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sober.Domain.Aggregates.SkillAggregate.Topic", b =>
                {
                    b.Navigation("Educations");
                });
#pragma warning restore 612, 618
        }
    }
}
